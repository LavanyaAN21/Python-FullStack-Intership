Question: 1
Find the maximum sum of any subarray containing at most k distinct integers.

Input:
        * An integer array arr of size 1 ≤ n ≤ 10⁵, where -10³ ≤ arr[i] ≤ 10³.
        * An integer k, where 1 ≤ k ≤ n.

Output:
        * Maximum sum of any subarray with at most k distinct integers.

Constraints:
        * Try to Solve in O(n) time (Optional).
Inputs:
arr = [4, 2, 2, 1, 1, 1, 8], k = 2
Output:
11
Explanation:
The subarray [4, 2, 2] has the maximum sum of 11 with at most 2 distinct integers.

from collections import defaultdict
def max_sum_subarray_k_distinct(arr, k):
    # WRITE YOUR CODE HERE...

    n = len(arr)
    left = 0
    curr_sum = 0
    max_sum = float('-inf')
    freq = defaultdict(int)

    for right in range(n):
        freq[arr[right]] += 1
        curr_sum += arr[right]

        while len(freq) > k:
            freq[arr[left]] -= 1
            curr_sum -= arr[left]
            if freq[arr[left]] == 0:
                del freq[arr[left]]
            left += 1

        max_sum = max(max_sum, curr_sum)

    return max_sum

******************************************************************************************************
Question:2

Given a 2-dimensional matrix matrix with m rows and n columns, where each row is sorted in ascending order from left to right, find the target element target. Return its position as a tuple (row, column) if found, otherwise return None.

Input:
        * matrix is a list of lists where 1 ≤ m, n ≤ 100.
        * target is an integer where -10000 ≤ target ≤ 10000.

Output:
        * Return the position of the target as a tuple (row, column) or None.

Constraints:
        * Matrix must meet the constraints for dimensions and sorting.
Inputs:
matrix = [     [1, 2, 3],     [4, 5, 6],     [7, 8, 9] ], target = 5
Output:
(1, 1)
Explanation:
The target 5 is at position (1, 1)


def search_target(matrix, target):
    if not matrix or not matrix[0]:
        return None

    for row_index, row in enumerate(matrix):
        left, right = 0, len(row) - 1
        while left <= right:
            mid = (left + right) // 2
            if row[mid] == target:
                return (row_index, mid)
            elif row[mid] < target:
                left = mid + 1
            else:
                right = mid - 1

    return None
 
******************************************************************************************************
Question:3
Find the maximum sum of any contiguous subarray of size k in the given array.

Input:
        * An integer array arr of size 1 ≤ n ≤ 10⁵, where -10³ ≤ arr[i] ≤ 10³.
        * An integer k, where 1 ≤ k ≤ n.

Output:
        * Maximum sum of any contiguous subarray of size k.

Constraints:
        * Try to Solve in O(n) time (Optional).
        * Subarray size k will always be valid.
Inputs:
arr = [2, 1, 5, 1, 3, 2], k = 3
Output:
9
Explanation:
The subarray [5, 1, 3] has the maximum sum 9.

def max_sum_subarray_k(arr, k):
    # WRITE YOUR CODE HERE...
    n = len(arr)
    if n < k:
        return None 

    window_sum = sum(arr[:k])
    max_sum = window_sum
    for i in range(k, n):
        window_sum += arr[i] - arr[i - k]  
        max_sum = max(max_sum, window_sum)

    return max_sum

******************************************************************************************************
Question:4

Given a 2-dimensional grid matrix with m rows and n columns, find the longest path of increasing adjacent elements. Two adjacent elements are connected if they share a side (up, down, left, right).
        *The path must contain only elements that increase in value.

Input:
        * A matrix matrix where 1 ≤ m, n ≤ 100.
        * Each cell contains a number where -10000 ≤ matrix[i][j] ≤ 10000.

Output:
        * Return the length of the longest increasing path in the grid.

Constraints:
        * Ensure matrix dimensions and values meet the constraints.
Inputs:
matrix = [     [1, 2, 3],     [6, 5, 4],     [7, 8, 9] ]
Output:
5
Explanation:
 The longest increasing path is [1 -> 2 -> 3 -> 4 -> 5] or [1 -> 2 -> 5 -> 6 -> 7]. The length is 5.

def longest_increasing_path(matrix):
    if not matrix or not matrix[0]:
        return 0

    rows, cols = len(matrix), len(matrix[0])
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    max_len = 0

    def dfs(r, c, prev_value):
        nonlocal max_len
        if not (0 <= r < rows and 0 <= c < cols):
            return 0
        if matrix[r][c] <= prev_value:
            return 0

        
        length = 1
        for dr, dc in directions:
            length = max(length, 1 + dfs(r + dr, c + dc, matrix[r][c]))
        
        max_len = max(max_len, length)
        return length


    for r in range(rows):
        for c in range(cols):
            dfs(r, c, -float('inf'))  

    return max_len
******************************************************************************************************
Question:5
Find the length of the longest substring without repeating characters.

Input:
        * A string s of length 1 ≤ n ≤ 10⁵, where s consists of lowercase English letters.

Output:
        * Length of the longest substring without repeating characters.

Constraints:
        * Solve in O(n) time.
Inputs:
s = "abcabcbb"
Output:
3
Explanation:
The substring "abc" is the longest without repeating characters.

def longest_substring_no_repeats(s):
    # WRITE YOUR CODE HERE...
    char_set = set()
    left = 0
    max_len = 0

    for right in range(len(s)):
        while s[right] in char_set:
            char_set.remove(s[left])
            left += 1
        char_set.add(s[right])
        max_len = max(max_len, right - left + 1)

    return max_len
******************************************************************************************************
Question:6

Question:
Find the length of the longest substring with no more than k distinct characters.

Input:
        * A string s of length 1 ≤ n ≤ 10⁵, where s consists of lowercase English letters.
        * An integer k, where 1 ≤ k ≤ 26.

Output:
        * Length of the longest substring with at most k distinct characters.

Constraints:
        * Try to Solve in O(n) time (Optional).
        * If k is greater than the total unique characters in s, return the length of s.
Inputs:
s = "araaci", k = 2
Output:
4
Explanation:
The substring "araa" has 2 distinct characters and is the longest such substring.

def longest_substring_k_distinct(s, k):
    # WRITE YOUR CODE HERE...
    char_count = {}
    left = 0
    max_len = 0

    for right in range(len(s)):
        char_count[s[right]] = char_count.get(s[right], 0) + 1
        
        while len(char_count) > k:
            char_count[s[left]] -= 1
            if char_count[s[left]] == 0:
                del char_count[s[left]]
            left += 1
        
        max_len = max(max_len, right - left + 1)

    return max_len

******************************************************************************************************
Question:7

Find the maximum sum of any contiguous subarray in the given array.

Input:
        * An integer array arr of size 1 ≤ n ≤ 10⁵, where -10⁴ ≤ arr[i] ≤ 10⁴.

Output:
        * Maximum sum of any contiguous subarray.

Constraints:
        * Try to Solve in O(n) time (Optional).
        * At least one element will be non-negative.
Inputs:
arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
Output:
6
Explanation:
The subarray [4, -1, 2, 1] has the maximum sum 6.

def max_subarray_sum(arr):
    # WRITE YOUR CODE HERE...
    current_sum = arr[0]
    max_sum = arr[0]
    
    for num in arr[1:]:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    
    return max_sum

******************************************************************************************************
Question:8

Find the length of the smallest contiguous subarray whose sum is greater than or equal to S. Return 0 if no such subarray exists.

Input:
        * An integer array arr of size 1 ≤ n ≤ 10⁵, where 1 ≤ arr[i] ≤ 10⁶.
        * An integer S, where 1 ≤ S ≤ 10⁶.

Output:
        * Length of the smallest subarray with a sum ≥ S.

Constraints:
        * Try to Solve in O(n) time (Optional).
        * If no subarray exists, return 0.
Inputs:
arr = [2, 1, 5, 2, 3, 2], S = 7
Output:
2
Explanation:
The subarray [5, 2] has a sum of 7 and is the smallest such subarray.

def smallest_subarray_with_sum(arr, S):
    # WRITE YOUR CODE HERE...
    left = 0
    current_sum = 0
    min_len = len(arr) + 1  

    for right in range(len(arr)):
        current_sum += arr[right]
        
        while current_sum >= S:
            min_len = min(min_len, right - left + 1)
            current_sum -= arr[left]
            left += 1
    
    return min_len if min_len <= len(arr) else 0

******************************************************************************************************
Question:9

Given a 2-dimensional matrix with m rows and n columns, return the transpose of the matrix. Transposing a matrix means flipping rows with columns.

Input:
        * matrix is a list of lists where 1 ≤ m, n ≤ 100.

Output:
        * Return the transposed matrix.

Constraints:
        * Ensure matrix dimensions follow the constraints.
Inputs:
matrix = [ [1, 2, 3],     [4, 5, 6],     [7, 8, 9] ]
Output:
[[1, 4, 7], [2, 5, 8], [3, 6, 9]]
Explanation:
the transposed matrix of  [ [1, 2, 3],     [4, 5, 6],     [7, 8, 9] ] is [[1, 4, 7], [2, 5, 8], [3, 6, 9]]

def transpose_matrix(matrix):
    # WRITE YOUR CODE HERE...
    return [list(row) for row in zip(*matrix)]

******************************************************************************************************
Question:10
Find the maximum product of any contiguous subarray in the given array.

Input:
        * An integer array arr of size 1 ≤ n ≤ 10⁵, where -10 ≤ arr[i] ≤ 10.

Output:
        * Maximum product of any contiguous subarray.

Constraints:
        * Try to Solve in O(n) time (Optional).
        * The array will have at least one non-zero element.
Inputs:
arr = [2, 3, -2, 4]
Output:
6
Explanation:
The subarray [2, 3] has the maximum product 6.

def max_product_subarray(arr):
    # WRITE YOUR CODE HERE...
    max_prod = min_prod = result = arr[0]

    for num in arr[1:]:
        if num < 0:
            max_prod, min_prod = min_prod, max_prod  

        max_prod = max(num, max_prod * num)
        min_prod = min(num, min_prod * num)

        result = max(result, max_prod)

    return result
