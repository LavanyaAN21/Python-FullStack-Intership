Question: 1
Given an array of integers, find the largest sum of any contiguous subarray within the array.

Input:
        * An array of integers nums where 1 ≤ len(nums) ≤ 100,000.
        * Each integer lies in the range -10,000 ≤ nums[i] ≤ 10,000.

Output:
        * Return the largest sum of any contiguous subarray.

Constraints:
        * Ensure the input array length and elements meet the constraints.
Inputs:
nums = [1, 2, 3, 4, 5]
Output:
15
Explanation:
The entire array is positive, so the sum of the entire array is the maximum contiguous sum.

def max_contiguous_sum(nums):
    # WRITE YOUR CODE HERE...
    max_sum = current_sum = nums[0]
    for num in nums[1:]:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    return max_sum

**************************************************************************************************************

Question:2
Given an array of integers nums and an integer k, find the longest subarray that contains exactly k distinct integers. Return the length of this subarray.

For example:
        * In the array nums = [1, 2, 1, 2, 3] with k = 3, the longest subarray with exactly 3 distinct integers is [1, 2, 3], so its length is 3.

Input:
        * An array of integers nums where 1 ≤ len(nums) ≤ 100,000.
        * Each integer lies in the range -10,000 ≤ nums[i] ≤ 10,000.
        * An integer k where 1 ≤ k ≤ 100.

Output:
        * Return a single integer representing the length of the longest subarray containing exactly k distinct integers.

Constraints:
        * Make sure your solution handles large arrays (up to 100,000 elements) efficiently.
        * No built-in libraries like collections or heapq should be used.
Inputs:
nums = [1, 2, 1, 2, 3], k = 2
Output:
4
Explanation:
The longest subarray with exactly 2 distinct integers is [1, 2, 1, 2], which has a length of 4.

def longest_subarray_with_k_distinct(nums, k):
    # WRITE YOUR CODE HERE...
    n = len(nums)
    if k == 0 or n == 0:
        return 0
    freq_map = {}
    left = 0
    max_len = 0
    for right in range(n):
        num = nums[right]
        if num in freq_map:
            freq_map[num] += 1
        else:
            freq_map[num] = 1
        while len(freq_map) > k:
            left_num = nums[left]
            freq_map[left_num] -= 1
            if freq_map[left_num] == 0:
                del freq_map[left_num]
            left += 1
        if len(freq_map) == k:
            max_len = max(max_len, right - left + 1)
    return max_len


**************************************************************************************************************


Question:3
Given an array nums and an integer k, rotate the array to the right by k steps.

Input:
        * An array of integers nums where 1 ≤ len(nums) ≤ 100,000.
        * An integer k where 0 ≤ k < len(nums).

Output:
        * Return the array after rotating it to the right by k steps.

Constraints:
        * Ensure input constraints are validated.
Inputs:
nums = [1, 2, 3, 4, 5], k = 2
Output:
[4, 5, 1, 2, 3]
Explanation:
After rotating the array [1, 2, 3, 4, 5] by 2 positions to the right, the result will be [4, 5, 1, 2, 3]

def rotate_array(nums, k):
    # WRITE YOUR CODE HERE...
    n = len(nums)
    k %= n
    def reverse(start, end):
        while start < end:
            nums[start], nums[end] = nums[end], nums[start]
            start += 1
            end -= 1
            
    reverse(0, n - 1)
    reverse(0, k - 1)
    reverse(k, n - 1)
    return nums

**************************************************************************************************************


Question:4
Given an array of integers, return the sum of all elements in the array.

Input:
        * An array of integers nums where 1 ≤ len(nums) ≤ 100,000.
        * Each integer lies in the range -10,000 ≤ nums[i] ≤ 10,000.

Output:

        * Return a single integer representing the sum of all elements in the array.

Constraints:

        *  Ensure the input array length and elements meet the constraints.
        *  Without using In-Built Function
Inputs:
nums = [1, 5, 6, 8]
Output:
20
Explanation:
The sum of all [1, 5, 6, 8] is 20

def sum_of_elements(nums):
    # WRITE YOUR CODE HERE...
    total = 0
    for i in nums:
        total += i
    return total


**************************************************************************************************************



Question:5
Determine whether a given array contains any duplicate elements.

Input:
        * An array of integers nums where 1 ≤ len(nums) ≤ 100,000.
        * Each integer lies in the range -10,000 ≤ nums[i] ≤ 10,000.

Output:
        * Return True if any value appears at least twice in the array, otherwise return False.

Constraints:
        * Ensure input constraints are met.
Inputs:
nums = [-1, -2, -3,-1, -4]
Output:
True
Explanation:
True ,Because value appears at least twice in the array  [-1, -2, -3,-1, -4] 

def contains_duplicate(nums):
    # WRITE YOUR CODE HERE...
    seen = {}
    for num in nums:
        if num in seen:
            return True
        seen[num] = True
    return False



**************************************************************************************************************



Question:6
Given an array of integers, find all unique triplets such that their sum is zero.

Input:
        * An integer array arr of size 3 ≤ n ≤ 10³, where -10⁶ ≤ arr[i] ≤ 10⁶.

Output:
        * A list of unique triplets where the sum of the three numbers is zero.

Constraints:
        * Each triplet must be unique.
        * Try to Solve in O(n²) time (Optional).
Inputs:
arr = [-1, 0, 1, 2, -1, -4]
Output:
[[-1, -1, 2], [-1, 0, 1]]
Explanation:
The unique triplets are [-1, -1, 2] and [-1, 0, 1].

def three_sum(arr):
    # WRITE YOUR CODE HERE...
    arr.sort()
    res = []
    for i in range(len(arr) - 2):
        if i > 0 and arr[i] == arr[i - 1]: continue
        l, r = i + 1, len(arr) - 1
        while l < r:
            s = arr[i] + arr[l] + arr[r]
            if s == 0:
                res.append([arr[i], arr[l], arr[r]])
                while l < r and arr[l] == arr[l + 1]: l += 1
                while l < r and arr[r] == arr[r - 1]: r -= 1
                l += 1; r -= 1
            elif s < 0: l += 1
            else: r -= 1
    return res
    
**************************************************************************************************************


Question:7
Given an array representing heights of bars, find the maximum water trapped after it rains.

Input:
        * An integer array height of size 1 ≤ n ≤ 10⁵, where 0 ≤ height[i] ≤ 10⁶.

Output:
        * The total water trapped.

Constraints:
        * Solve in O(n) time using two pointers.
Inputs:
height = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]
Output:
6
Explanation:
Water is trapped between the bars in the given pattern.

def trap_rainwater(height):
    # WRITE YOUR CODE HERE...
    left, right = 0, len(height) - 1
    left_max = right_max = water = 0
    while left < right:
        if height[left] < height[right]:
            if height[left] >= left_max:
                left_max = height[left]
            else:
                water += left_max - height[left]
            left += 1
        else:
            if height[right] >= right_max:
                right_max = height[right]
            else:
                water += right_max - height[right]
            right -= 1
    return water


**************************************************************************************************************


Question:8
Given a sorted array, remove duplicates in-place such that each element appears only once. Return the length of the modified array.

Input:
        * A sorted integer array arr of size 1 ≤ n ≤ 10⁵, where -10⁶ ≤ arr[i] ≤ 10⁶.

Output:
        * The length of the modified array.

Constraints:
        * Do not use extra space.
        * The relative order of elements must be maintained.
Inputs:
arr = [1, 1, 2, 2, 3, 4, 4]
Output:
4
Explanation:
The modified array is [1, 2, 3, 4].

def remove_duplicates(arr):
    # WRITE YOUR CODE HERE...
    if not arr:
        return 0
    i = 0
    for j in range(1, len(arr)):
        if arr[j] != arr[i]:
            i += 1
            arr[i] = arr[j]
    return i + 1


**************************************************************************************************************


Question:9
Given a sorted array of integers, find two numbers that add up to a given target.

Input:
        * A sorted integer array arr of size 2 ≤ n ≤ 10⁵, where -10⁶ ≤ arr[i] ≤ 10⁶.
        * An integer target, where -10⁶ ≤ target ≤ 10⁶.

Output:
        * Indices of the two numbers in a 1-based index format, such that their sum equals the target. Return [-1, -1] if no such pair exists.

Constraints:
        * There is at most one solution.
        * Try to Solve in O(n) time (Optional).
Inputs:
arr = [1, 2, 3, 4, 6], target = 6
Output:
[2, 4]
Explanation:
The numbers at indices 1 and 3 (1-based) are 2 and 4, which sum to 6.

def pair_with_target_sum(arr, target):
    # WRITE YOUR CODE HERE...
    left, right = 0, len(arr) - 1
    while left < right:
        curr_sum = arr[left] + arr[right]
        if curr_sum == target:
            return [left + 1, right + 1]  # 1-based index
        elif curr_sum < target:
            left += 1
        else:
            right -= 1
    return [-1, -1]
    
**************************************************************************************************************


Question:10
Given an array of integers, find the length of the longest subarray with a sum less than or equal to k.

Input:
        * An integer array arr of size 1 ≤ n ≤ 10⁵, where -10⁶ ≤ arr[i] ≤ 10⁶.
        * An integer k, where -10⁶ ≤ k ≤ 10⁶.

Output:
        * Length of the longest subarray with a sum ≤ k.

Constraints:
        * Solve in O(n) time using two pointers.
Inputs:
arr = [1, 2, 3, 4, 5], k = 8
Output:
3
Explanation:
The subarray [1, 2, 3] has a sum of 6, which is ≤ 8.

def longest_subarray_with_sum(arr, k):
    # WRITE YOUR CODE HERE...
    left = 0
    curr_sum = 0
    max_len = 0
    for right in range(len(arr)):
        curr_sum += arr[right]
        while curr_sum > k:
            curr_sum -= arr[left]
            left += 1
        max_len = max(max_len, right - left + 1)
    return max_len
